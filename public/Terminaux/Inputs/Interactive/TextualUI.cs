//
// Terminaux  Copyright (C) 2023-2025  Aptivi
//
// This file is part of Terminaux
//
// Terminaux is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Terminaux is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY, without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

using System;
using System.Collections.Generic;
using System.Linq;
using Terminaux.Base;
using Terminaux.Base.Buffered;
using Terminaux.Inputs.Pointer;
using Terminaux.Inputs.Styles;
using Terminaux.Inputs.Styles.Infobox;
using Terminaux.Inputs.Styles.Infobox.Tools;
using Terminaux.Writer.CyclicWriters.Renderer;
using Terminaux.Writer.CyclicWriters.Renderer.Tools;

namespace Terminaux.Inputs.Interactive
{
    /// <summary>
    /// Base textual UI class for your interactive applications
    /// </summary>
    public abstract class TextualUI
    {
        internal TextualUIState state = TextualUIState.Ready;
        internal Screen uiScreen = new();
        private Guid guid = Guid.NewGuid();
        private Action<TextualUI, ConsoleKeyInfo, PointerEventContext?>? fallback;

        /// <summary>
        /// Unique ID for this textual UI
        /// </summary>
        public Guid Guid =>
            guid;

        /// <summary>
        /// State of this textual UI
        /// </summary>
        public TextualUIState State =>
            state;

        /// <summary>
        /// Name of the interactive textual UI
        /// </summary>
        public string Name { get; set; } = "Interactive UI";

        /// <summary>
        /// Refresh delay. If set to zero or less than zero, this means that this UI doesn't refresh itself.
        /// </summary>
        public int RefreshDelay { get; set; } = 0;

        /// <summary>
        /// List of available keybindings
        /// </summary>
        /// <remarks>
        /// You can edit this to add your custom keybindings, but it's preferrable to either place them in a constructor or
        /// in the overridden value, and to define the delegates in separate private functions inside the UI class.
        /// </remarks>
        public virtual List<(Keybinding binding, Action<TextualUI, ConsoleKeyInfo, PointerEventContext?> action)> Keybindings { get; } = [];

        /// <summary>
        /// Fallback keybinding in case defined keybinding doesn't exist.
        /// </summary>
        public Action<TextualUI, ConsoleKeyInfo, PointerEventContext?>? Fallback
        {
            get => fallback;
            set => fallback = value;
        }

        /// <summary>
        /// List of renderable contianers that are going to be laid out on top of what <see cref="Render()"/> prints to the console.
        /// </summary>
        public virtual List<Container> Renderables { get; } = [];

        /// <summary>
        /// A list of help pages
        /// </summary>
        public virtual InteractiveTuiHelpPage[] HelpPages { get; } = [];

        /// <summary>
        /// Renders this interactive textual UI
        /// </summary>
        /// <returns>A string generated by this function for the <see cref="TextualUITools.RunTui(TextualUI)"/> function to render to the console</returns>
        /// <remarks>
        /// Generated sequence, which will be used for rendering, has lower priority than <see cref="Renderables"/>, so any
        /// renderable container specified in that property will overwrite what's been rendered.
        /// </remarks>
        public abstract string Render();

        /// <summary>
        /// Tells the textual UI that the refresh is required
        /// </summary>
        public void RequireRefresh() =>
            uiScreen.RequireRefresh();

        private void ListBindings()
        {
            // Populate appropriate bindings, depending on the SecondPaneInteractable value
            var uiBindings = Keybindings.Select((kb) => kb.binding).ToArray();
            List<Keybinding> finalBindings =
            [
                new Keybinding(LanguageTools.GetLocalized("T_INPUT_COMMON_KEYBINDING_KEYBINDINGS"), ConsoleKey.K),
                new Keybinding(LanguageTools.GetLocalized("T_INPUT_STYLES_SELECTORS_KEYBINDING_HELP"), ConsoleKey.H),
            ];
            finalBindings.AddRange(uiBindings);
            InfoBoxModalColor.WriteInfoBoxModal(KeybindingTools.RenderKeybindingHelpText([.. finalBindings]), new InfoBoxSettings()
            {
                Title = LanguageTools.GetLocalized("T_WRITER_CYCLICWRITERS_TOOLS_KEYBINDING_AVAILABLE_KEYBINDINGS")
            });
        }

        private void OpenHelpPages()
        {
            // Prepare an infinite loop that allows opening help pages until exit is chosen
            bool bail = false;
            while (!bail)
            {
                // List all help pages by title and short description
                InputChoiceInfo[] choices =
                [
                    .. HelpPages.Select((hp) => new InputChoiceInfo(LanguageTools.GetLocalized(hp.HelpTitle), LanguageTools.GetLocalized(hp.HelpDescription))),
                    new InputChoiceInfo(LanguageTools.GetLocalized("T_INPUT_COMMON_KEYBINDING_EXIT"), LanguageTools.GetLocalized("T_INPUT_COMMON_KEYBINDING_EXIT"))
                ];
                int idx = InfoBoxSelectionColor.WriteInfoBoxSelection(choices, LanguageTools.GetLocalized("T_INPUT_INTERACTIVE_TUIHELP_INFOBOX"), new InfoBoxSettings()
                {
                    Title = LanguageTools.GetLocalized("T_INPUT_INTERACTIVE_TUIHELP_INFOBOXTITLE")
                });

                // Check to see if we're exiting or not
                if (idx == -1 || idx == choices.Length - 1)
                    bail = true;
                else
                {
                    // Get the help page
                    var page = HelpPages[idx];
                    var choice = choices[idx];

                    // Open an infobox that shows the help page
                    InfoBoxModalColor.WriteInfoBoxModal(LanguageTools.GetLocalized(page.HelpBody), new InfoBoxSettings()
                    {
                        Title = choice.ChoiceName + " - " + choice.ChoiceDescription,
                    });
                }
            }
        }

        internal TextualUI()
        {
            Keybindings.Add((new Keybinding(LanguageTools.GetLocalized("T_INPUT_COMMON_KEYBINDING_KEYBINDINGS"), ConsoleKey.K), (_, _, _) => ListBindings()));
            Keybindings.Add((new Keybinding(LanguageTools.GetLocalized("T_INPUT_STYLES_SELECTORS_KEYBINDING_HELP"), ConsoleKey.H), (_, _, _) => OpenHelpPages()));
        }
    }
}
